set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


" let Vundle manage Vundle
"required! 
Plugin 'gmarik/Vundle.vim'

Bundle 'cespare/vim-golang'
Bundle 'Blackrush/vim-gocode'
Bundle 'bling/vim-airline'
Bundle 'ayang/AutoComplPop'

Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"
Bundle 'tpope/vim-fugitive'
Bundle 'itchyny/landscape.vim'
Bundle 'majutsushi/tagbar'
Bundle 'scrooloose/syntastic'
Bundle 'dgryski/vim-godef'

call vundle#end()            " required
filetype plugin indent on    " required

set t_Co=256
set ttimeoutlen=50
" 檔案編碼
set encoding=utf-8
set fileencodings=utf-8,cp950
 
" 編輯喜好設定                                                                                                                                                                                                    
syntax on        " 語法上色顯示
set nocompatible " VIM 不使用和 VI 相容的模式
" set ai           " 自動縮排
set shiftwidth=4 " 設定縮排寬度 = 4
set tabstop=4    " tab 的字元數
set softtabstop=4
" set expandtab   " 用 space 代替 tab
 
set ruler        " 顯示右下角設定值
set backspace=2  " 在 insert 也可用 backspace
set ic           " 設定搜尋忽略大小寫
set ru           " 第幾行第幾個字
set hlsearch     " 設定高亮度顯示搜尋結果
set incsearch    " 在關鍵字還沒完全輸入完畢前就顯示結果
set smartindent  " 設定 smartindent
set confirm      " 操作過程有衝突時，以明確的文字來詢問
set history=100  " 保留 100 個使用過的指令
set cursorline   " 顯示目前的游標位置
 
colorscheme torte

" GO Related Setting

let g:SuperTabDefaultCompletionType = "context"
set laststatus=2 " status line always visible

" vim-airline
let g:airline_powerline_fonts=1
let g:airline_theme = 'understated'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_linecolumn_prefix = '␊'
let g:airline_branch_prefix = ''

au Filetype go set makeprg=go\ build\ ./...
nmap <F5> :make<CR>:copen<CR>
nmap <F8> :TagbarToggle<CR>

set shiftwidth=4
set tabstop=4

set tags=/home/ernest/workspace/HTC/CSI/src/gotags

filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
filetype plugin on
syntax on
au FileType c,cpp,objc,objcpp,java,go call rainbow#load()
au FileType go au BufWritePre <buffer> Fmt

function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /* call LoadCscope()

" 0 or s: Find this C symbol                    
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" 1 or g: Find this definition
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" 2 or d: Find functions called by this function
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" 3 or c: Find functions calling this function
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" 4 or t: Find this text string
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" 6 or e: Find this egrep pattern
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" 7 or f: Find this file
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>

let g:godef_split=3

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
